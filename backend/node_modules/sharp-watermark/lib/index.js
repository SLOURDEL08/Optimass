"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTextWatermark = exports.addImageWatermark = void 0;
var sharp_1 = __importDefault(require("sharp"));
var getValidatedOptions_1 = __importDefault(require("./helpers/getValidatedOptions"));
var getWatermarkSize_1 = __importDefault(require("./helpers/getWatermarkSize"));
var positions_1 = __importDefault(require("./helpers/positions"));
var getTextAlignment_1 = __importDefault(require("./helpers/getTextAlignment"));
var getAlpha_1 = __importDefault(require("./helpers/getAlpha"));
/**
 * Adds a watermark image to a main image.
 * @async
 * @param {string|Buffer} mainImage - The main image to which the watermark will be added.
 * @param {string|Buffer} watermarkImage - The watermark image to be added to the main image.
 * @param {Options} options - An object containing optional values for the watermark position, size, etc.
 * @throws {Error} Invalid ratio value.
 * @throws {Error} Invalid x-coordinate value.
 * @throws {Error} Invalid y-coordinate value.
 * @throws {Error} Invalid position value.
 * @returns {Promise<Sharp.Sharp>} The main image object with the watermark applied.
 */
var addImageWatermark = function (mainImage, watermarkImage, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, ratio, position, x, y, mainImageSharp, waterMarkWidth, mainImageBuffer, watermarkImageBuffer, watermark;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = (0, getValidatedOptions_1.default)(options), ratio = _a.ratio, position = _a.position, x = _a.x, y = _a.y;
                    mainImageSharp = (0, sharp_1.default)(mainImage);
                    return [4 /*yield*/, (0, getWatermarkSize_1.default)(mainImageSharp, ratio)];
                case 1:
                    waterMarkWidth = (_b.sent()).waterMarkWidth;
                    return [4 /*yield*/, mainImageSharp.toBuffer()];
                case 2:
                    mainImageBuffer = _b.sent();
                    return [4 /*yield*/, (0, sharp_1.default)(watermarkImage).toBuffer()];
                case 3:
                    watermarkImageBuffer = _b.sent();
                    return [4 /*yield*/, (0, sharp_1.default)(watermarkImageBuffer)
                            .resize(waterMarkWidth) // only passing width will maintain the aspect ratio
                            .toBuffer()];
                case 4:
                    watermark = _b.sent();
                    return [2 /*return*/, (0, sharp_1.default)(mainImageBuffer)
                            .composite([
                            {
                                input: watermark,
                                top: y,
                                left: x,
                                gravity: positions_1.default[position],
                            },
                        ])
                            .withMetadata()];
            }
        });
    });
};
exports.addImageWatermark = addImageWatermark;
/**
 * Adds a watermark text to a main image.
 * @async
 * @param {string|Buffer} mainImage - The main image to which the watermark will be added.
 * @param {string} watermarkText - The watermark text to be added to the main image.
 * @param {Options} options - An object containing optional values for the watermark position, size, opacity, etc.
 * @throws {Error} Invalid x-coordinate value.
 * @throws {Error} Invalid y-coordinate value.
 * @throws {Error} Invalid position value.
 * @returns {Promise<Sharp.Sharp>} The main image object with the watermark applied.
 */
var addTextWatermark = function (mainImage, watermarkText, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, dpi, opacity, position, x, y, mainImageBuffer, textColor, watermarkObj;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = (0, getValidatedOptions_1.default)(options), dpi = _a.dpi, opacity = _a.opacity, position = _a.position, x = _a.x, y = _a.y;
                    return [4 /*yield*/, (0, sharp_1.default)(mainImage).toBuffer()];
                case 1:
                    mainImageBuffer = _b.sent();
                    textColor = "#000000".concat((0, getAlpha_1.default)(opacity));
                    watermarkObj = {
                        text: {
                            text: "<span foreground=\"".concat(textColor, "\">").concat(watermarkText, "</span>"),
                            align: (0, getTextAlignment_1.default)(position),
                            dpi: dpi,
                            rgba: true,
                        },
                    };
                    return [2 /*return*/, (0, sharp_1.default)(mainImageBuffer)
                            .composite([
                            {
                                input: watermarkObj,
                                top: y,
                                left: x,
                                gravity: positions_1.default[position],
                            },
                        ])
                            .withMetadata()];
            }
        });
    });
};
exports.addTextWatermark = addTextWatermark;
