"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var defaultOptions_1 = __importDefault(require("./defaultOptions"));
var errorMessages_1 = require("./errorMessages");
var positions_1 = __importDefault(require("./positions"));
/**
 * Validates the options object and returns a new object with validated values.
 * @param {Options} options - An object containing optional values for the options.
 * @throws {Error} Invalid ratio value.
 * @throws {Error} Invalid x-coordinate value.
 * @throws {Error} Invalid y-coordinate value.
 * @throws {Error} Invalid position value.
 * @returns {Options} A new object with validated values.
 */
var getValidatedOptions = function (options) {
    var allOptions = __assign(__assign({}, defaultOptions_1.default), options);
    var ratio = allOptions.ratio, opacity = allOptions.opacity, position = allOptions.position, x = allOptions.x, y = allOptions.y;
    if (ratio && (ratio < 0 || ratio > 1))
        throw errorMessages_1.INVALID_RATIO;
    if (opacity && (opacity < 0 || opacity > 1))
        throw errorMessages_1.INVALID_OPACITY;
    if (x && x < 0)
        throw errorMessages_1.INVALID_X_COORDINATE;
    if (y && y < 0)
        throw errorMessages_1.INVALID_Y_COORDINATE;
    if (position && !positions_1.default[position])
        throw errorMessages_1.INVALID_POSITION;
    return allOptions;
};
exports.default = getValidatedOptions;
