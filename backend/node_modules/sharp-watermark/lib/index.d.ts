/// <reference types="node" />
import Sharp from "sharp";
import type { Options } from "./helpers/types";
/**
 * Adds a watermark image to a main image.
 * @async
 * @param {string|Buffer} mainImage - The main image to which the watermark will be added.
 * @param {string|Buffer} watermarkImage - The watermark image to be added to the main image.
 * @param {Options} options - An object containing optional values for the watermark position, size, etc.
 * @throws {Error} Invalid ratio value.
 * @throws {Error} Invalid x-coordinate value.
 * @throws {Error} Invalid y-coordinate value.
 * @throws {Error} Invalid position value.
 * @returns {Promise<Sharp.Sharp>} The main image object with the watermark applied.
 */
export declare const addImageWatermark: (mainImage: string | Buffer, watermarkImage: string | Buffer, options?: Options) => Promise<Sharp.Sharp>;
/**
 * Adds a watermark text to a main image.
 * @async
 * @param {string|Buffer} mainImage - The main image to which the watermark will be added.
 * @param {string} watermarkText - The watermark text to be added to the main image.
 * @param {Options} options - An object containing optional values for the watermark position, size, opacity, etc.
 * @throws {Error} Invalid x-coordinate value.
 * @throws {Error} Invalid y-coordinate value.
 * @throws {Error} Invalid position value.
 * @returns {Promise<Sharp.Sharp>} The main image object with the watermark applied.
 */
export declare const addTextWatermark: (mainImage: string | Buffer, watermarkText: string, options?: Options) => Promise<Sharp.Sharp>;
